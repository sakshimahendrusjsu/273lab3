{"ast":null,"code":"import _defineProperty from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/src/ManageOrders/codeboxOrder.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: \"item-\".concat(k + offset),\n  content: \"item \".concat(k + offset)\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  console.log(\"reorder list\", list);\n  console.log(\"startIndex\", startIndex);\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n\n  const _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n        _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n        removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: \"0 0 \".concat(grid, \"px 0\"),\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey'\n}, draggableStyle);\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\nclass codeboxOrder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const source = result.source,\n            destination = result.destination;\n      console.log(\"onDragEnd\");\n      console.log(\"source\", source);\n      console.log(\"destination\", destination); // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination);\n        this.setState({\n          items: result.droppable,\n          selected: result.droppable2\n        });\n      }\n    };\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.state.items.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), item.content))), provided.placeholder)), React.createElement(Droppable, {\n      droppableId: \"droppable2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.state.selected.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), item.content))), provided.placeholder))));\n  }\n\n}\n\nexport default codeboxOrder;","map":{"version":3,"sources":["/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/src/ManageOrders/codeboxOrder.js"],"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","console","log","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","codeboxOrder","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","render","display","flexDirection","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    console.log(\"reorder list\",list);\r\n    console.log(\"startIndex\",startIndex);\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nclass codeboxOrder extends Component {\r\n    state = {\r\n        items: getItems(10),\r\n        selected: getItems(5, 10)\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n        console.log(\"onDragEnd\");\r\n        console.log(\"source\",source);\r\n        console.log(\"destination\",destination)\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    render() {\r\n        return (\r\n            <div style={{display:'flex',flexDirection:'row'}}>\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default codeboxOrder;\r\n"]},"metadata":{},"sourceType":"module"}