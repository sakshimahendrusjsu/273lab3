{"ast":null,"code":"import _classCallCheck from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/src/ManageOrders/codeboxOrder.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'; // fake data generator\n\nvar getItems = function getItems(count) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k + offset),\n      content: \"item \".concat(k + offset)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  console.log(\"reorder list\", list);\n  console.log(\"startIndex\", startIndex);\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nvar move = function move(source, destination, droppableSource, droppableDestination) {\n  var sourceClone = Array.from(source);\n  var destClone = Array.from(destination);\n\n  var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n      _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n      removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  var result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey'\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250\n  };\n};\n\nvar codeboxOrder =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(codeboxOrder, _Component);\n\n  function codeboxOrder() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, codeboxOrder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(codeboxOrder)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    _this.id2List = {\n      droppable: 'items',\n      droppable2: 'selected'\n    };\n\n    _this.getList = function (id) {\n      return _this.state[_this.id2List[id]];\n    };\n\n    _this.onDragEnd = function (result) {\n      var source = result.source,\n          destination = result.destination;\n      console.log(\"onDragEnd\");\n      console.log(\"source\", source);\n      console.log(\"destination\", destination); // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        var items = reorder(_this.getList(source.droppableId), source.index, destination.index);\n        var state = {\n          items: items\n        };\n\n        if (source.droppableId === 'droppable2') {\n          state = {\n            selected: items\n          };\n        }\n\n        _this.setState(state);\n      } else {\n        var _result = move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);\n\n        _this.setState({\n          items: _result.droppable,\n          selected: _result.droppable2\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(codeboxOrder, [{\n    key: \"render\",\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, _this2.state.items.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138\n              },\n              __self: this\n            }), item.content);\n          });\n        }), provided.placeholder);\n      }), React.createElement(Droppable, {\n        droppableId: \"droppable2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, _this2.state.selected.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            }), item.content);\n          });\n        }), provided.placeholder);\n      })));\n    }\n  }]);\n\n  return codeboxOrder;\n}(Component);\n\nexport default codeboxOrder;","map":{"version":3,"sources":["/Users/sakshi/Documents/AllCodes/React/273/lab/frontend/src/ManageOrders/codeboxOrder.js"],"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","console","log","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","codeboxOrder","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","display","flexDirection","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    console.log(\"reorder list\",list);\r\n    console.log(\"startIndex\",startIndex);\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nclass codeboxOrder extends Component {\r\n    state = {\r\n        items: getItems(10),\r\n        selected: getItems(5, 10)\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n        console.log(\"onDragEnd\");\r\n        console.log(\"source\",source);\r\n        console.log(\"destination\",destination)\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    render() {\r\n        return (\r\n            <div style={{display:'flex',flexDirection:'row'}}>\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default codeboxOrder;\r\n"]},"metadata":{},"sourceType":"module"}